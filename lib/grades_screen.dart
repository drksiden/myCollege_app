import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:flutter_animate/flutter_animate.dart';
import '../mock_data.dart'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º mock –¥–∞–Ω–Ω—ã–µ

class GradesScreen extends StatefulWidget {
  const GradesScreen({super.key});

  @override
  State<GradesScreen> createState() => _GradesScreenState();
}

class _GradesScreenState extends State<GradesScreen> {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ mock_data.dart
  final List<Map<String, dynamic>> allGrades = mockGrades;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–µ
  String selectedSubject = '–í—Å–µ';

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –æ—Ü–µ–Ω–æ–∫
  List<Map<String, dynamic>> getFilteredGrades() {
    if (selectedSubject == '–í—Å–µ') {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º) –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
      final sortedList = List<Map<String, dynamic>>.from(allGrades);
      sortedList.sort(
        (a, b) =>
            DateTime.parse(b['date']).compareTo(DateTime.parse(a['date'])),
      );
      return sortedList;
    }
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    final filteredList =
        allGrades.where((g) => g['subject'] == selectedSubject).toList();
    filteredList.sort(
      (a, b) => DateTime.parse(b['date']).compareTo(DateTime.parse(a['date'])),
    );
    return filteredList;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç double)
  double calculateAverage(List<Map<String, dynamic>> list) {
    if (list.isEmpty) return 0.0; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º double 0.0

    // –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∫–∞–∫ double –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
    final sum = list.fold(0.0, (acc, e) => acc + (e['score'] as int));
    return sum / list.length; // –ü—Ä–æ—Å—Ç–æ –¥–µ–ª–∏–º, –±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –∑–¥–µ—Å—å
  }

  @override
  Widget build(BuildContext context) {
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
    final filtered = getFilteredGrades();
    final average = calculateAverage(filtered);
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è Dropdown, –¥–æ–±–∞–≤–ª—è—è '–í—Å–µ'
    final subjects = [
      '–í—Å–µ',
      ...{
        ...allGrades.map((g) => g['subject']),
      }, // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set {...} –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    ];
    // –§–ª–∞–≥, –µ—Å—Ç—å –ª–∏ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º —Ñ–∏–ª—å—Ç—Ä–µ
    final bool hasGrades = filtered.isNotEmpty;

    return Scaffold(
      // AppBar –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º
      appBar: AppBar(
        title: const Text('–û—Ü–µ–Ω–∫–∏'),
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ–∫–∞ –±–µ–∑ –ª–æ–≥–∏–∫–∏)
        // actions: [
        //   IconButton(
        //     icon: const Icon(Icons.refresh),
        //     onPressed: () {
        //       // TODO: –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç Firebase)
        //     },
        //   ),
        // ],
      ),
      // –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ —ç–∫—Ä–∞–Ω–∞ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
      body: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 16.0),
        child: Column(
          crossAxisAlignment:
              CrossAxisAlignment.stretch, // –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –ø–æ —à–∏—Ä–∏–Ω–µ
          children: [
            const SizedBox(height: 16), // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
            // üîç –í–∏–¥–∂–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
            DropdownButtonFormField<String>(
              value: selectedSubject, // –¢–µ–∫—É—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
              // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∏–∑ InputDecorator –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ–º–µ
              decoration: InputDecoration(
                labelText: '–ü—Ä–µ–¥–º–µ—Ç', // –ú–µ—Ç–∫–∞ –Ω–∞–¥ –ø–æ–ª–µ–º
                border: OutlineInputBorder(
                  // –†–∞–º–∫–∞ –≤–æ–∫—Ä—É–≥ –ø–æ–ª—è
                  borderRadius: BorderRadius.circular(12),
                ),
                // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –≤ –ø–æ–ª–µ
                contentPadding: const EdgeInsets.symmetric(
                  horizontal: 16,
                  vertical: 8,
                ),
              ),
              // –§–æ—Ä–º–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ Dropdown
              items:
                  subjects.map((subject) {
                    return DropdownMenuItem<String>(
                      value: subject,
                      child: Text(subject),
                    );
                  }).toList(),
              // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –≤ Dropdown
              onChanged: (String? value) {
                if (value != null) {
                  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
                  setState(() {
                    selectedSubject = value;
                  });
                }
              },
            ),
            const SizedBox(height: 16), // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
            // üìã –°–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫ –ò–õ–ò —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
            Expanded(
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º AnimatedSwitcher –¥–ª—è –ø–ª–∞–≤–Ω–æ–π —Å–º–µ–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
              child: AnimatedSwitcher(
                duration: const Duration(milliseconds: 300),
                // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è/–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
                transitionBuilder:
                    (child, animation) =>
                        FadeTransition(opacity: animation, child: child),
                // –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–ª–∏—á–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
                child:
                    hasGrades
                        ? ListView.builder(
                          // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º
                          key: const ValueKey('grades_list'),
                          itemCount:
                              filtered.length, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
                          itemBuilder: (context, index) {
                            final grade =
                                filtered[index]; // –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –æ—Ü–µ–Ω–∫–∏
                            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å –≥–æ–¥–æ–º
                            final formattedDate = DateFormat(
                              'd MMM yy',
                              'ru',
                            ).format(DateTime.parse(grade['date']));

                            // –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
                            return Card(
                                  // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç cardTheme –∏–∑ MaterialApp
                                  child: ListTile(
                                    // –ò–∫–æ–Ω–∫–∞ —Å–ª–µ–≤–∞ –≤ –∫—Ä—É–∂–∫–µ
                                    leading: CircleAvatar(
                                      backgroundColor:
                                          Theme.of(
                                            context,
                                          ).colorScheme.primaryContainer,
                                      foregroundColor:
                                          Theme.of(
                                            context,
                                          ).colorScheme.onPrimaryContainer,
                                      child: const Icon(Icons.grade_outlined),
                                    ),
                                    // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
                                    title: Text(grade['subject']),
                                    // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ—Ü–µ–Ω–∫–æ–π –∏ –¥–∞—Ç–æ–π
                                    subtitle: Text(
                                      '–û—Ü–µ–Ω–∫–∞: ${grade['score']} / –î–∞—Ç–∞: $formattedDate',
                                    ),
                                    // –û—Ü–µ–Ω–∫–∞ —Å–ø—Ä–∞–≤–∞, —Ü–≤–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
                                    trailing: Text(
                                      '${grade['score']}',
                                      style: TextStyle(
                                        fontSize: 18,
                                        fontWeight: FontWeight.bold,
                                        // –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–ª–ª–∞
                                        color:
                                            grade['score'] >= 85
                                                ? Colors.green.shade600
                                                : (grade['score'] >= 70
                                                    ? Colors.orange.shade700
                                                    : Colors.red.shade600),
                                      ),
                                    ),
                                  ),
                                )
                                // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
                                .animate()
                                .fadeIn(
                                  duration: 300.ms,
                                  delay: (index * 50).ms,
                                )
                                .slideY(begin: 0.2, end: 0.0, duration: 300.ms);
                          },
                        )
                        : Center(
                          // –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
                          // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–µ–∑ –æ—Ü–µ–Ω–æ–∫
                          key: const ValueKey('no_grades'),
                          child:
                              Padding(
                                // –î–æ–±–∞–≤–∏–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                                padding: const EdgeInsets.all(16.0),
                                child: Text(
                                  // –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–∏–ª—å—Ç—Ä–∞
                                  selectedSubject == '–í—Å–µ'
                                      ? '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è'
                                      : '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "$selectedSubject"',
                                  style: Theme.of(context).textTheme.titleMedium
                                      ?.copyWith(color: Colors.grey.shade600),
                                  textAlign: TextAlign.center,
                                ),
                              ).animate().fadeIn(), // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
                        ),
              ),
            ),
            const SizedBox(height: 16), // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
            // üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏)
            AnimatedSwitcher(
              duration: const Duration(milliseconds: 300),
              // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è/–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
              transitionBuilder: (Widget child, Animation<double> animation) {
                return FadeTransition(
                  opacity: animation,
                  child: ScaleTransition(scale: animation, child: child),
                );
              },
              // –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–ª–∏—á–∏—è –æ—Ü–µ–Ω–æ–∫ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ (—á–µ—Ä–µ–∑ Key)
              child:
                  hasGrades
                      ? Text(
                        '–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ${average.toStringAsFixed(1)}',
                        // –ö–ª—é—á –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞, —á—Ç–æ–±—ã AnimatedSwitcher
                        // –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–∞
                        key: ValueKey<String>('avg_$selectedSubject'),
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç —Ç–µ–º—ã
                          color: Theme.of(context).colorScheme.primary,
                        ),
                        textAlign: TextAlign.center,
                      )
                      // –ï—Å–ª–∏ –æ—Ü–µ–Ω–æ–∫ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π SizedBox
                      : SizedBox(key: const ValueKey('no_avg')),
            ),
            const SizedBox(height: 16), // –ù–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø
          ],
        ),
      ),
    );
  }
}
